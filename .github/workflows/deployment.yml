# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Node.js CI

on:
  push:
    branches: ['main']
  pull_request:
    branches: ['main']

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      POSTGRES_DB: ${{ secrets.local.DB_NAME }}
      POSTGRES_PASSWORD: ${{ secrets.local.DB_PASSWORD }}
      POSTGRES_USER: ${{ secrets.local.DB_USER }}
      POSTGRES_URL: postgres://${{ secrets.local.DB_USER }}:${{ secrets.local.DB_PASSWORD }}@localhost:5432/${{ secrets.local.DB_NAME }}
      DATABASE_URL: postgresql://${{ secrets.local.DB_USER }}:${{ secrets.local.DB_PASSWORD }}@localhost:5432/${{ secrets.local.DB_NAME }}?schema=public
      DATABASE_LOGS: ${{ vars.local.DB_LOGS }}

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 18.x
          cache: 'npm'

      - run: npm ci
      - run:  echo
                POSTGRES_DB=$POSTGRES_DB'\n'
                POSTGRES_PASSWORD=$POSTGRES_PASSWORD'\n'
                POSTGRES_USER=$POSTGRES_USER'\n'
                POSTGRES_URL=$POSTGRES_URL'\n'
                DATABASE_URL=$DATABASE_URL'\n'
                DATABASE_LOGS=$DATABASE_LOGS'\n'
              > .env
      - run: echo "$(<.env)"
      - run: npm run build --if-present
      - run: npm run lint
      - run: docker-compose up -d
      - run: sleep 5
      - run: npx prisma migrate dev
      - run: npx jest --maxWorkers=1 --collectCoverage --silent

    # TODO: add deployment
